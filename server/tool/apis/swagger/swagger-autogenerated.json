{
  "swagger": "2.0",
  "info": {
    "description": "Create APIs at the speed of your thoughts",
    "version": "1.0.0",
    "title": "XgeneCloud",
    "contact": {}
  },
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "common"
    },
    {
      "name": "Authentication",
      "description": "Everything about User Authentication"
    },
    {
      "name": "familyBelongsToperson",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "familyHasManyfamilyitem",
      "description": "Everything about has many relation"
    },
    {
      "name": "family",
      "description": "Everything about your family"
    },
    {
      "name": "familyitemBelongsTofamily",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "familyitemBelongsTofamilyrole",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "familyitemBelongsToperson",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "familyitem",
      "description": "Everything about your familyitem"
    },
    {
      "name": "familyroleHasManyfamilyitem",
      "description": "Everything about has many relation"
    },
    {
      "name": "familyrole",
      "description": "Everything about your familyrole"
    },
    {
      "name": "personBelongsTousers",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "personHasManyfamily",
      "description": "Everything about has many relation"
    },
    {
      "name": "personHasManyfamilyitem",
      "description": "Everything about has many relation"
    },
    {
      "name": "person",
      "description": "Everything about your person"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Get server health",
        "description": "",
        "operationId": "health",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "process_uptime": "282.6 Seconds",
                "process_memory_usage": {
                  "rss": "46.73 MB",
                  "heapTotal": "24.62 MB",
                  "heapUsed": "19.74 MB",
                  "external": "1.59 MB"
                },
                "os_total_memory": "16384.00 MB",
                "os_free_memory": "826.23 MB",
                "os_load_average": [
                  "3.51",
                  "3.36",
                  "3.24"
                ],
                "v8_heap_statistics": {
                  "total_heap_size": "24.62 MB",
                  "total_heap_size_executable": "0.80 MB",
                  "total_physical_size": "22.25 MB",
                  "total_available_size": "2075.67 MB",
                  "used_heap_size": "19.75 MB",
                  "heap_size_limit": "2096.00 MB",
                  "malloced_memory": "0.09 MB",
                  "peak_malloced_memory": "10.10 MB",
                  "does_zap_garbage": 0,
                  "number_of_native_contexts": 2,
                  "number_of_detached_contexts": 0
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/signin": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Authentication user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userAuth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated successfully",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User signup",
        "description": "",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/auth/signout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "description": "",
        "operationId": "logout",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout success"
          }
        }
      }
    },
    "/api/v1/auth/password/forgot": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password Forgot",
        "description": "",
        "operationId": "passwordForgot",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "required": true,
                  "example": "test@xgenecloud.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/auth/email/validate/{tokenId}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Email validate link",
        "description": "",
        "operationId": "emailValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/token/validate/{tokenId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Validate password reset token",
        "description": "",
        "operationId": "passwordResetTokenValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/password/reset/": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password reset",
        "description": "",
        "operationId": "passwordReset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reset password details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "password",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully"
          }
        }
      }
    },
    "/api/v1/user/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "USer details",
        "description": "",
        "operationId": "userDetails",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        }
      }
    },
    "/api/v1/user": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "updateUserDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ]
      }
    },
    "/api/v1/user/password/change": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "passwordChange",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Current password and new password",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currentPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "password"
                },
                "newPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "newPassword"
                }
              }
            }
          }
        ]
      }
    },
    "/api/v1/auth/google": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication url",
        "description": "",
        "operationId": "googleAuthentication"
      }
    },
    "/api/v1/auth/facebook": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication url",
        "description": "",
        "operationId": "facebookAuthentication"
      }
    },
    "/api/v1/auth/google/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication callback url",
        "description": "",
        "operationId": "googleAuthenticationCallback"
      }
    },
    "/api/v1/auth/facebook/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication callback url",
        "description": "",
        "operationId": "facebookAuthenticationCallback"
      }
    },
    "/api/v1/family/belongs/person": {
      "get": {
        "tags": [
          "familyBelongsToperson"
        ],
        "summary": "Get family list with person parent",
        "description": "",
        "operationId": "familyWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/family/has/familyitem": {
      "get": {
        "tags": [
          "familyHasManyfamilyitem"
        ],
        "summary": "Get family list with familyitem children",
        "description": "",
        "operationId": "familyHasManyfamilyitemList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/family/{familyId}/familyitem": {
      "get": {
        "tags": [
          "familyHasManyfamilyitem"
        ],
        "summary": "Find familyitem list by parent family id",
        "description": "Returns a single family",
        "operationId": "getfamilyitemByfamilyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of family to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "family not found"
          }
        }
      },
      "post": {
        "tags": [
          "familyHasManyfamilyitem"
        ],
        "summary": "Insert familyitem under a parent family",
        "description": "Returns a single family",
        "operationId": "insertfamilyitemByfamilyId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyitem object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of family to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/family/{familyId}/familyitem/{familyitemId}": {
      "get": {
        "tags": [
          "familyHasManyfamilyitem"
        ],
        "summary": "Get by familyitem id parent family id",
        "description": "Returns a single family",
        "operationId": "getfamilyitemByIdAndfamilyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of parent family",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "familyHasManyfamilyitem"
        ],
        "summary": "Delete by familyitem id parent family id",
        "description": "Returns a single family",
        "operationId": "deletefamilyitemByIdAndfamilyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of parent family",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of cfamilyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "familyHasManyfamilyitem"
        ],
        "summary": "Update familyitem under a parent family",
        "description": "Returns a single family",
        "operationId": "updatefamilyitemByIdAndfamilyId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyitem object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of family to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/family/{familyId}/familyitem/{familyitemId}/exists": {
      "get": {
        "tags": [
          "familyHasManyfamilyitem"
        ],
        "summary": "Check row exists by familyitem id and parent family id",
        "description": "",
        "operationId": "existsfamilyitemByIdAndfamilyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of parent family",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/family/{familyId}/familyitem/findOne": {
      "get": {
        "tags": [
          "familyHasManyfamilyitem"
        ],
        "summary": "Find one familyitem by parent family id and filters",
        "description": "",
        "operationId": "findOnefamilyitemByfamilyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of parent family",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/family/{familyId}/familyitem/count": {
      "get": {
        "tags": [
          "familyHasManyfamilyitem"
        ],
        "summary": "Get familyitem count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinfamilyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of parent family",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/family": {
      "post": {
        "tags": [
          "family"
        ],
        "summary": "Add a new family",
        "description": "",
        "operationId": "addfamily",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "family object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/family"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "family"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getfamily",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/family/{familyId}": {
      "get": {
        "tags": [
          "family"
        ],
        "summary": "Find family by ID",
        "description": "Returns a single family",
        "operationId": "getfamilyById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of family to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/family"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "family not found"
          }
        }
      },
      "put": {
        "tags": [
          "family"
        ],
        "summary": "Updates a family",
        "description": "",
        "operationId": "updatefamily",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of family to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "family object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/family"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "family"
        ],
        "summary": "Deletes a family",
        "description": "",
        "operationId": "deletefamily",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of family to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "family not found"
          }
        }
      }
    },
    "/api/v1/family/bulk": {
      "post": {
        "tags": [
          "family"
        ],
        "summary": "Bulk family insert",
        "description": "",
        "operationId": "bulkfamilyInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "family objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/family"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "family"
        ],
        "summary": "Updates a family",
        "description": "",
        "operationId": "updatefamily",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "family objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/family"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "family"
        ],
        "summary": "Deletes a family",
        "description": "",
        "operationId": "deletefamily",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "family objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/family"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "family not found"
          }
        }
      }
    },
    "/api/v1/family/findOne": {
      "get": {
        "tags": [
          "family"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnefamily",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/family"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/family/{familyId}/exists": {
      "get": {
        "tags": [
          "family"
        ],
        "summary": "Check family with provided ID exists",
        "description": "Returns a single family",
        "operationId": "checkfamilyExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of family",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/family/count": {
      "get": {
        "tags": [
          "family"
        ],
        "summary": "Get family count",
        "operationId": "getfamilyCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/family/groupby/{columnName}": {
      "get": {
        "tags": [
          "family"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "familyGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/family"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/family/distribution/{columnName}": {
      "get": {
        "tags": [
          "family"
        ],
        "summary": "",
        "description": "",
        "operationId": "familyDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/family/distinct/{columnName}": {
      "get": {
        "tags": [
          "family"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "familyDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/family/aggregate/{columnName}": {
      "get": {
        "tags": [
          "family"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "familyAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/family"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyitem/belongs/family": {
      "get": {
        "tags": [
          "familyitemBelongsTofamily"
        ],
        "summary": "Get familyitem list with family parent",
        "description": "",
        "operationId": "familyitemWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/familyitem/belongs/familyrole": {
      "get": {
        "tags": [
          "familyitemBelongsTofamilyrole"
        ],
        "summary": "Get familyitem list with familyrole parent",
        "description": "",
        "operationId": "familyitemWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/familyitem/belongs/person": {
      "get": {
        "tags": [
          "familyitemBelongsToperson"
        ],
        "summary": "Get familyitem list with person parent",
        "description": "",
        "operationId": "familyitemWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/familyitem": {
      "post": {
        "tags": [
          "familyitem"
        ],
        "summary": "Add a new familyitem",
        "description": "",
        "operationId": "addfamilyitem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyitem object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/familyitem"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "familyitem"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getfamilyitem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyitem/{familyitemId}": {
      "get": {
        "tags": [
          "familyitem"
        ],
        "summary": "Find familyitem by ID",
        "description": "Returns a single familyitem",
        "operationId": "getfamilyitemById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/familyitem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "familyitem not found"
          }
        }
      },
      "put": {
        "tags": [
          "familyitem"
        ],
        "summary": "Updates a familyitem",
        "description": "",
        "operationId": "updatefamilyitem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "familyitem object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/familyitem"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "familyitem"
        ],
        "summary": "Deletes a familyitem",
        "description": "",
        "operationId": "deletefamilyitem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "familyitem not found"
          }
        }
      }
    },
    "/api/v1/familyitem/bulk": {
      "post": {
        "tags": [
          "familyitem"
        ],
        "summary": "Bulk familyitem insert",
        "description": "",
        "operationId": "bulkfamilyitemInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyitem objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/familyitem"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "familyitem"
        ],
        "summary": "Updates a familyitem",
        "description": "",
        "operationId": "updatefamilyitem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyitem objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/familyitem"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "familyitem"
        ],
        "summary": "Deletes a familyitem",
        "description": "",
        "operationId": "deletefamilyitem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyitem objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/familyitem"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "familyitem not found"
          }
        }
      }
    },
    "/api/v1/familyitem/findOne": {
      "get": {
        "tags": [
          "familyitem"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnefamilyitem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/familyitem"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyitem/{familyitemId}/exists": {
      "get": {
        "tags": [
          "familyitem"
        ],
        "summary": "Check familyitem with provided ID exists",
        "description": "Returns a single familyitem",
        "operationId": "checkfamilyitemExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/familyitem/count": {
      "get": {
        "tags": [
          "familyitem"
        ],
        "summary": "Get familyitem count",
        "operationId": "getfamilyitemCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyitem/groupby/{columnName}": {
      "get": {
        "tags": [
          "familyitem"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "familyitemGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/familyitem"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyitem/distribution/{columnName}": {
      "get": {
        "tags": [
          "familyitem"
        ],
        "summary": "",
        "description": "",
        "operationId": "familyitemDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyitem/distinct/{columnName}": {
      "get": {
        "tags": [
          "familyitem"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "familyitemDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyitem/aggregate/{columnName}": {
      "get": {
        "tags": [
          "familyitem"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "familyitemAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/familyitem"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyrole/has/familyitem": {
      "get": {
        "tags": [
          "familyroleHasManyfamilyitem"
        ],
        "summary": "Get familyrole list with familyitem children",
        "description": "",
        "operationId": "familyroleHasManyfamilyitemList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/familyrole/{familyroleId}/familyitem": {
      "get": {
        "tags": [
          "familyroleHasManyfamilyitem"
        ],
        "summary": "Find familyitem list by parent familyrole id",
        "description": "Returns a single familyrole",
        "operationId": "getfamilyitemByfamilyroleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of familyrole to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "familyrole not found"
          }
        }
      },
      "post": {
        "tags": [
          "familyroleHasManyfamilyitem"
        ],
        "summary": "Insert familyitem under a parent familyrole",
        "description": "Returns a single familyrole",
        "operationId": "insertfamilyitemByfamilyroleId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyitem object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of familyrole to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/familyrole/{familyroleId}/familyitem/{familyitemId}": {
      "get": {
        "tags": [
          "familyroleHasManyfamilyitem"
        ],
        "summary": "Get by familyitem id parent familyrole id",
        "description": "Returns a single familyrole",
        "operationId": "getfamilyitemByIdAndfamilyroleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of parent familyrole",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "familyroleHasManyfamilyitem"
        ],
        "summary": "Delete by familyitem id parent familyrole id",
        "description": "Returns a single familyrole",
        "operationId": "deletefamilyitemByIdAndfamilyroleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of parent familyrole",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of cfamilyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "familyroleHasManyfamilyitem"
        ],
        "summary": "Update familyitem under a parent familyrole",
        "description": "Returns a single familyrole",
        "operationId": "updatefamilyitemByIdAndfamilyroleId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyitem object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of familyrole to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/familyrole/{familyroleId}/familyitem/{familyitemId}/exists": {
      "get": {
        "tags": [
          "familyroleHasManyfamilyitem"
        ],
        "summary": "Check row exists by familyitem id and parent familyrole id",
        "description": "",
        "operationId": "existsfamilyitemByIdAndfamilyroleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of parent familyrole",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/familyrole/{familyroleId}/familyitem/findOne": {
      "get": {
        "tags": [
          "familyroleHasManyfamilyitem"
        ],
        "summary": "Find one familyitem by parent familyrole id and filters",
        "description": "",
        "operationId": "findOnefamilyitemByfamilyroleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of parent familyrole",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/familyrole/{familyroleId}/familyitem/count": {
      "get": {
        "tags": [
          "familyroleHasManyfamilyitem"
        ],
        "summary": "Get familyitem count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinfamilyroleId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of parent familyrole",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/familyrole": {
      "post": {
        "tags": [
          "familyrole"
        ],
        "summary": "Add a new familyrole",
        "description": "",
        "operationId": "addfamilyrole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyrole object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/familyrole"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "familyrole"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getfamilyrole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyrole/{familyroleId}": {
      "get": {
        "tags": [
          "familyrole"
        ],
        "summary": "Find familyrole by ID",
        "description": "Returns a single familyrole",
        "operationId": "getfamilyroleById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of familyrole to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/familyrole"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "familyrole not found"
          }
        }
      },
      "put": {
        "tags": [
          "familyrole"
        ],
        "summary": "Updates a familyrole",
        "description": "",
        "operationId": "updatefamilyrole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of familyrole to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "familyrole object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/familyrole"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "familyrole"
        ],
        "summary": "Deletes a familyrole",
        "description": "",
        "operationId": "deletefamilyrole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of familyrole to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "familyrole not found"
          }
        }
      }
    },
    "/api/v1/familyrole/bulk": {
      "post": {
        "tags": [
          "familyrole"
        ],
        "summary": "Bulk familyrole insert",
        "description": "",
        "operationId": "bulkfamilyroleInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyrole objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/familyrole"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "familyrole"
        ],
        "summary": "Updates a familyrole",
        "description": "",
        "operationId": "updatefamilyrole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyrole objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/familyrole"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "familyrole"
        ],
        "summary": "Deletes a familyrole",
        "description": "",
        "operationId": "deletefamilyrole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyrole objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/familyrole"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "familyrole not found"
          }
        }
      }
    },
    "/api/v1/familyrole/findOne": {
      "get": {
        "tags": [
          "familyrole"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnefamilyrole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/familyrole"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyrole/{familyroleId}/exists": {
      "get": {
        "tags": [
          "familyrole"
        ],
        "summary": "Check familyrole with provided ID exists",
        "description": "Returns a single familyrole",
        "operationId": "checkfamilyroleExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "familyroleId",
            "in": "path",
            "description": "ID of familyrole",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/familyrole/count": {
      "get": {
        "tags": [
          "familyrole"
        ],
        "summary": "Get familyrole count",
        "operationId": "getfamilyroleCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyrole/groupby/{columnName}": {
      "get": {
        "tags": [
          "familyrole"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "familyroleGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/familyrole"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyrole/distribution/{columnName}": {
      "get": {
        "tags": [
          "familyrole"
        ],
        "summary": "",
        "description": "",
        "operationId": "familyroleDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyrole/distinct/{columnName}": {
      "get": {
        "tags": [
          "familyrole"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "familyroleDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/familyrole/aggregate/{columnName}": {
      "get": {
        "tags": [
          "familyrole"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "familyroleAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/familyrole"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/person/belongs/users": {
      "get": {
        "tags": [
          "personBelongsTousers"
        ],
        "summary": "Get person list with users parent",
        "description": "",
        "operationId": "personWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/person/has/family": {
      "get": {
        "tags": [
          "personHasManyfamily"
        ],
        "summary": "Get person list with family children",
        "description": "",
        "operationId": "personHasManyfamilyList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/person/{personId}/family": {
      "get": {
        "tags": [
          "personHasManyfamily"
        ],
        "summary": "Find family list by parent person id",
        "description": "Returns a single person",
        "operationId": "getfamilyBypersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "person not found"
          }
        }
      },
      "post": {
        "tags": [
          "personHasManyfamily"
        ],
        "summary": "Insert family under a parent person",
        "description": "Returns a single person",
        "operationId": "insertfamilyBypersonId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "family object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/person/{personId}/family/{familyId}": {
      "get": {
        "tags": [
          "personHasManyfamily"
        ],
        "summary": "Get by family id parent person id",
        "description": "Returns a single person",
        "operationId": "getfamilyByIdAndpersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of parent person",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of family",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "personHasManyfamily"
        ],
        "summary": "Delete by family id parent person id",
        "description": "Returns a single person",
        "operationId": "deletefamilyByIdAndpersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of parent person",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of cfamily",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "personHasManyfamily"
        ],
        "summary": "Update family under a parent person",
        "description": "Returns a single person",
        "operationId": "updatefamilyByIdAndpersonId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "family object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of family",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/person/{personId}/family/{familyId}/exists": {
      "get": {
        "tags": [
          "personHasManyfamily"
        ],
        "summary": "Check row exists by family id and parent person id",
        "description": "",
        "operationId": "existsfamilyByIdAndpersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of parent person",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyId",
            "in": "path",
            "description": "ID of family",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/person/{personId}/family/findOne": {
      "get": {
        "tags": [
          "personHasManyfamily"
        ],
        "summary": "Find one family by parent person id and filters",
        "description": "",
        "operationId": "findOnefamilyBypersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of parent person",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/person/{personId}/family/count": {
      "get": {
        "tags": [
          "personHasManyfamily"
        ],
        "summary": "Get family count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinpersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of parent person",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/person/has/familyitem": {
      "get": {
        "tags": [
          "personHasManyfamilyitem"
        ],
        "summary": "Get person list with familyitem children",
        "description": "",
        "operationId": "personHasManyfamilyitemList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/person/{personId}/familyitem": {
      "get": {
        "tags": [
          "personHasManyfamilyitem"
        ],
        "summary": "Find familyitem list by parent person id",
        "description": "Returns a single person",
        "operationId": "getfamilyitemBypersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "person not found"
          }
        }
      },
      "post": {
        "tags": [
          "personHasManyfamilyitem"
        ],
        "summary": "Insert familyitem under a parent person",
        "description": "Returns a single person",
        "operationId": "insertfamilyitemBypersonId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyitem object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/person/{personId}/familyitem/{familyitemId}": {
      "get": {
        "tags": [
          "personHasManyfamilyitem"
        ],
        "summary": "Get by familyitem id parent person id",
        "description": "Returns a single person",
        "operationId": "getfamilyitemByIdAndpersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of parent person",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "personHasManyfamilyitem"
        ],
        "summary": "Delete by familyitem id parent person id",
        "description": "Returns a single person",
        "operationId": "deletefamilyitemByIdAndpersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of parent person",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of cfamilyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "personHasManyfamilyitem"
        ],
        "summary": "Update familyitem under a parent person",
        "description": "Returns a single person",
        "operationId": "updatefamilyitemByIdAndpersonId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "familyitem object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/person/{personId}/familyitem/{familyitemId}/exists": {
      "get": {
        "tags": [
          "personHasManyfamilyitem"
        ],
        "summary": "Check row exists by familyitem id and parent person id",
        "description": "",
        "operationId": "existsfamilyitemByIdAndpersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of parent person",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "familyitemId",
            "in": "path",
            "description": "ID of familyitem",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/person/{personId}/familyitem/findOne": {
      "get": {
        "tags": [
          "personHasManyfamilyitem"
        ],
        "summary": "Find one familyitem by parent person id and filters",
        "description": "",
        "operationId": "findOnefamilyitemBypersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of parent person",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/person/{personId}/familyitem/count": {
      "get": {
        "tags": [
          "personHasManyfamilyitem"
        ],
        "summary": "Get familyitem count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinpersonId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of parent person",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/person": {
      "post": {
        "tags": [
          "person"
        ],
        "summary": "Add a new person",
        "description": "",
        "operationId": "addperson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "person object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/person"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "person"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getperson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/person/{personId}": {
      "get": {
        "tags": [
          "person"
        ],
        "summary": "Find person by ID",
        "description": "Returns a single person",
        "operationId": "getpersonById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/person"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "person not found"
          }
        }
      },
      "put": {
        "tags": [
          "person"
        ],
        "summary": "Updates a person",
        "description": "",
        "operationId": "updateperson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "person object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/person"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "person"
        ],
        "summary": "Deletes a person",
        "description": "",
        "operationId": "deleteperson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "person not found"
          }
        }
      }
    },
    "/api/v1/person/bulk": {
      "post": {
        "tags": [
          "person"
        ],
        "summary": "Bulk person insert",
        "description": "",
        "operationId": "bulkpersonInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "person objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/person"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "person"
        ],
        "summary": "Updates a person",
        "description": "",
        "operationId": "updateperson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "person objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/person"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "person"
        ],
        "summary": "Deletes a person",
        "description": "",
        "operationId": "deleteperson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "person objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/person"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "person not found"
          }
        }
      }
    },
    "/api/v1/person/findOne": {
      "get": {
        "tags": [
          "person"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneperson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/person"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/person/{personId}/exists": {
      "get": {
        "tags": [
          "person"
        ],
        "summary": "Check person with provided ID exists",
        "description": "Returns a single person",
        "operationId": "checkpersonExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/person/count": {
      "get": {
        "tags": [
          "person"
        ],
        "summary": "Get person count",
        "operationId": "getpersonCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/person/groupby/{columnName}": {
      "get": {
        "tags": [
          "person"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "personGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/person"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/person/distribution/{columnName}": {
      "get": {
        "tags": [
          "person"
        ],
        "summary": "",
        "description": "",
        "operationId": "personDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/person/distinct/{columnName}": {
      "get": {
        "tags": [
          "person"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "personDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/person/aggregate/{columnName}": {
      "get": {
        "tags": [
          "person"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "personAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/person"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "userAuth": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "nullable": false,
          "example": "test@xgenecloud.com"
        },
        "password": {
          "type": "string",
          "format": "password",
          "nullable": false,
          "example": "password"
        }
      }
    },
    "user": {
      "allOf": [
        {
          "$ref": "#/definitions/userAuth"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "nullable": false,
              "readOnly": true
            },
            "firstname": {
              "type": "string",
              "nullable": false,
              "example": "FirstName"
            },
            "lastname": {
              "type": "string",
              "nullable": false,
              "example": "LastName"
            },
            "roles": {
              "type": "object",
              "readOnly": true
            },
            "created_at": {
              "type": "string",
              "readOnly": true
            },
            "updated_at": {
              "type": "string",
              "readOnly": true
            },
            "email_verified": {
              "type": "boolean",
              "readOnly": true
            }
          }
        }
      ]
    },
    "family": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "person_id": {
          "type": "integer"
        }
      }
    },
    "familyitem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "family_id": {
          "type": "integer"
        },
        "person_id": {
          "type": "integer"
        },
        "familyrole_id": {
          "type": "integer"
        },
        "isFamilyCreater": {
          "type": "integer"
        }
      }
    },
    "familyrole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "sort": {
          "type": "integer"
        },
        "type": {
          "type": "integer"
        }
      }
    },
    "person": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "openid": {
          "type": "string"
        },
        "session_key": {
          "type": "string"
        },
        "mobile_phone": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "gender": {
          "type": "integer"
        },
        "language": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "unionId": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about XgeneCloud",
    "url": "http://xgenecloud.com"
  }
}